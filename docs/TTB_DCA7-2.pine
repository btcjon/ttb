//@version=5
strategy('TTB DCA 7.2S', overlay=true, calc_on_order_fills=true, initial_capital=1000000, default_qty_type=strategy.cash, default_qty_value=100000, currency=currency.USD, pyramiding=999, use_bar_magnifier=true, calc_on_every_tick=false, max_bars_back=4000)

import thetradingbot/ttbcolors/1 as TTBColors
import thetradingbot/TTB_TableBuilder/1 as TTBTableBuilder

// f_security function for MTF
f_security(_sym, _res, _src, _rep) =>
    request.security(_sym, _res, _src[not _rep and barstate.isrealtime ? 1 : 0])[_rep or barstate.isrealtime ? 0 : 1]
var bool i_repaint = false // Set to false to avoid repainting
var string ticker = syminfo.tickerid

source_type = input.string('Close', 'Source', options=['Close', 'Open', 'High', 'Low', 'HL2', 'HLC3', 'OHLC4', 'Median Body', 'Weighted Close', 'Trend Biased', 'Trend Biased Extreme'])
direction = input.string(defval='Short', title='Trading Direction', options=['All', 'Long', 'Short'])


source_function(type) =>
    if type == 'Close'
        close
    else if type == 'Open'
        open
    else if type == 'High'
        high
    else if type == 'Low'
        low
    else if type == 'HL2'
        hl2
    else if type == 'HL3'
        hlc3
    else if type == 'OHLC4'
        ohlc4
    else if type == 'Median Body'
        (open + close) / 2
    else if type == 'Weighted Close'
        (high + low + 2 * close) / 4
    else if type == 'Trend Biased'
        close > open ? (high + close) / 2 : (low + close) / 2
    else if type == 'Trend Biased Extreme'
        close > open ? high : low

truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor

var long = false
var short = true

if direction == 'All'
    long := true
    short := true
    short
else if direction == 'Long'
    long := true
    short := false
    short
else if direction == 'Short'
    long := false
    short := true
    short

// Strategy Inputs
groupTitleGeneralInputs = "General Inputs"
ID = input(defval='6700960415957', title='ID', group = groupTitleGeneralInputs)
version = input(defval='7-2', title='version', group = groupTitleGeneralInputs)
test = input(defval='1', title='test', group = groupTitleGeneralInputs)
HTF1= input('60', title='HTF1', group = groupTitleGeneralInputs)
HTF2= input('240', title='HTF2', group = groupTitleGeneralInputs)
safe_order_step_scale_Multiplier = input(1.3, title="Safe Order Step Scale Multiplier", group = groupTitleGeneralInputs)
MinSOBars = input(100, title="Min Bars Between SOs", group = groupTitleGeneralInputs)
show_table = input(true, title='Show table', group = groupTitleGeneralInputs)
text_size_switch = true
// Date Ranges
startDateTime = input.time(timestamp("1 Feb 2021 12:00"), title="Start", group="Strategy Date Range")
endDateTime = input.time(timestamp("1 Feb 2024 12:00"), title="End", group="Strategy Date Range")
window = time >= startDateTime and time <= endDateTime ? true : false  // create function "within window of time"

groupTitleLongInputs = "Long Inputs"
price_deviation = input.float(0.04, title='Price deviation to open safety orders (%)', step=0.1, minval=0.0, group = groupTitleLongInputs) /100
take_profit = input.float(0.07, title='Long TP1 (%)', step=0.01, minval=0.0, group = groupTitleLongInputs) /100
take_profit2 = input.float(0.11, title='Long TP2(%)', step=0.01, minval=0.0, group = groupTitleLongInputs) /100
base_order_lots = input.float(0.4, "Base Order Size (Lots)", group = groupTitleLongInputs)
safe_order_lots = input.float(0.4, "Safe Order Size (Lots)", group = groupTitleLongInputs)
safe_order_volume_scale = input.float(1, step=0.1, title='Safety order volume scale', group = groupTitleLongInputs)
safe_order_step_scale = input.float(1.3, step=0.1, title='Safety order step scale', group = groupTitleLongInputs)
max_safe_order = input(6, title='max no. of safe orders', group = groupTitleLongInputs)

groupTitleShortInputs = "Short Inputs"
price_S_deviation = input.float(0.04, title='Price deviation to open short safety orders (%)', step=0.1, minval=0.0, group = groupTitleShortInputs) /100
take_S_profit = input.float(0.07, title='Short TP1 (%)', step=0.01, minval=0.0, group = groupTitleShortInputs) /100
take_S_profit2 = input.float(0.11, title='Short TP2 (%)', step=0.01, minval=0.0, group = groupTitleShortInputs) /100
base_S_order_lots = input.float(0.4, title='base sell order (Lots)', group = groupTitleShortInputs)
safe_S_order_lots = input.float(0.4, title='safe sell order (Lots)', group = groupTitleShortInputs)
safe_S_order_volume_scale = input.float(1, step=0.1, title='Safety sell order volume scale', group = groupTitleShortInputs)
safe_S_order_step_scale = input.float(1.3, step=0.1, title='Safety sell order step scale', group = groupTitleShortInputs)
max_S_safe_order = input(6, title='max no. of sell safe orders', group = groupTitleShortInputs)


//------------- DETERMINE CURRENCY CONVERSION RATE ------------- { //
// Import ZenLibrary
import ZenAndTheArtOfTrading/ZenLibrary/5 as zen
// Custom function for converting units into lot sizes
unitsToLots(units) =>
    float lots = units / 100000
    lots := math.round(lots, 2)
    _return = lots * 100000
// Check if our account currency is the same as the base or quote currency or neither (for risk $ conversion purposes)
accountSameAsCounterCurrency = strategy.account_currency == syminfo.currency
accountSameAsBaseCurrency = strategy.account_currency == syminfo.basecurrency
accountNeitherCurrency = not accountSameAsCounterCurrency and not accountSameAsBaseCurrency
// Get currency conversion rates if applicable
conversionCurrencyPair = accountSameAsCounterCurrency ? syminfo.tickerid : strategy.account_currency + syminfo.currency
conversionCurrencyRate = accountSameAsBaseCurrency or accountNeitherCurrency ? request.security(conversionCurrencyPair, "D", close, ignore_invalid_symbol=true) : 1.0
// Display the current conversion currency ticker (for debug purposes)
if barstate.islastconfirmedhistory
    table t = table.new(position.top_right, 1, 2, color.black)
    table.cell(t, 0, 0, "Conversion: " + conversionCurrencyPair + " (" + str.tostring(conversionCurrencyRate) + ")", text_color=color.white, text_size=size.small)
    table.cell(t, 0, 1, "Account: $" + str.tostring(zen.truncate(strategy.equity)), text_color=color.white, text_size=size.small)

//positionSize = Lots * 100000  // Convert lots to units
//lotSize = unitsToLots(positionSize)

base_order = base_order_lots * 100000
safe_order = safe_order_lots * 100000
base_S_order = base_S_order_lots * 100000
safe_S_order = safe_S_order_lots * 100000
//------------- END CURRENCY CONVERSION RATE CODE ------------- }//



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// rmi trend
// ** ---> Inputs ------------- {
showRMIplots = input.bool(false, "Show RMI Plots")
var bool rmi_positive               = false
var bool rmi_negative               = false
string rmi_RSI_group                = "RMI Settings"
string rmi_mom_group                = "Range Vales"
string rmi_visual                   = "Visuals" 
rmi_Length = 14
rmi_pmom = 66 //positive above
rmi_nmom = 30 //negative below
bool rmi_filleshow = true
color rmi_bull = color.new(color.rgb(0, 188, 212), 70) // 70% transparency
color rmi_bear = color.new(color.rgb(255, 82, 82), 70) // 70% transparency
float rmi_BarRange                  = high - low

rmi_up = ta.rma(math.max(ta.change(close), 0), rmi_Length)
rmi_down = ta.rma(-math.min(ta.change(close), 0), rmi_Length)
rmi_rsi = rmi_down == 0 ? 100 : rmi_up == 0 ? 0 : 100 - (100 / (1 + rmi_up / rmi_down))
rmi_mf = ta.mfi(hlc3, rmi_Length)
rmi_rsi_mfi = math.avg(rmi_rsi,rmi_mf)


//------------------- }

bool rmi_p_mom                          = rmi_rsi_mfi[1] < rmi_pmom and
      rmi_rsi_mfi > rmi_pmom and
      rmi_rsi_mfi > rmi_nmom and
       ta.change(ta.ema(close,5)) > 0

bool rmi_n_mom                          = rmi_rsi_mfi < rmi_nmom and
      ta.change(ta.ema(close,5)) < 0
// //  ---> Momentums ------------- {

if rmi_p_mom
    rmi_positive:= true
    rmi_negative:= false

if rmi_n_mom
    rmi_positive:= false
    rmi_negative:= true     


method rmi_Band(int len)=>
    math.min (ta.atr (len) * 0.3, close * (0.3/100)) [20] /2 * 8 


rmi_Band = rmi_Band(30) 


method rmi_rangeMA(float Range,Prd)=>
    weight = Range / math.sum(Range, Prd)
    sum = math.sum(close * weight, Prd)
    tw= math.sum(weight, Prd)
    sum / tw


// Calculate the RWMA
rmi_rwma = rmi_rangeMA(rmi_BarRange,20)

// Plotting the RWMA.
rmi_RWMA = rmi_positive ? rmi_rwma - rmi_Band : rmi_negative ? rmi_rwma + rmi_Band : na

rmi_max = rmi_RWMA + rmi_Band
rmi_min = rmi_RWMA - rmi_Band


rmi_buy = rmi_positive and not rmi_positive[1]
rmi_sell = rmi_negative and not rmi_negative[1]

rmi_buy_filter = rmi_positive
rmi_sell_filter = rmi_negative

plotshape(series=showRMIplots and rmi_sell_filter, title="RMI Sell Filter", location=location.abovebar, color=color.rgb(155, 39, 176, 50), style=shape.diamond, size=size.tiny)

// end rmi trend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// supertrend2
source2 = close
groupTitleST2 = "SuperTrend2"
atrPeriod2 = input.int(10, "ATR Length for ST2", minval = 1, group = groupTitleST2)
factor2 = input.float(30.0, "Factor for ST2", minval = 0.01, step = 0.01, group = groupTitleST2)
showST2plot = input.bool(defval=false, title="Show Supertrend2 Plots", group = groupTitleST2)

[supertrend2, ST_direction2] = ta.supertrend(factor2, atrPeriod2)

supertrend2 := barstate.isfirst ? na : supertrend2

upTrend2 = plot(showST2plot and ST_direction2 < 0 ? supertrend2 : na, "Up Trend ST2", color = TTBColors.colorUp(), style = plot.style_linebr)
downTrend2 = plot(showST2plot and ST_direction2 > 0 ? supertrend2 : na, "Down Trend ST2", color = TTBColors.colorDown(), style = plot.style_linebr)
//bodyMiddle2 = plot(showST2plot and barstate.isfirst ? na : (open + close) / 2, "Body Middle ST2",display = display.none)

ST2longTrigger = ta.crossover(close, supertrend2)
ST2shortTrigger = ta.crossunder(close, supertrend2)
ST2longFilter = ST_direction2 < 0
ST2shortFilter = ST_direction2 > 0

// end supertrend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}


//-----------------------------------------------------------------------------}
// Structure
groupTitleStructureSettings = "Structure Settings"
MSlength  = input(10, 'Pivot Lookback', group = groupTitleStructureSettings)
incr    = input.float(95, 'Increment Factor %', minval = 0, group = groupTitleStructureSettings)
StrucTF1 = input(title="StrucTF1", defval="60", group = groupTitleStructureSettings)
showMS  = input(false, "Show Structures", group = groupTitleStructureSettings)
showStrucPlots  = input(true, "Show Struc Plots", group = groupTitleStructureSettings)

resetOn = 'CHoCH'

//Style 
bullCss    = color.rgb(7, 232, 187, 34)
bearCss    = color.rgb(250, 36, 214, 37)
retCss     = #ffbb00
areaTransp = 90

//------------------------------------------------------------------------------
//Global variables
//-----------------------------------------------------------------------------{
var float ph_y = na , var int ph_x = na
var float pl_y = na , var int pl_x = na
var float top = na  , var float btm = na
var ph_cross = false, var pl_cross = false

var float max = na
var float min = na
var float ts = na

var os = 0
ms = 0

//------------------------------------------------------------------------------
//Detect pivots and get coordinates
//-----------------------------------------------------------------------------{
n = bar_index
ph = ta.pivothigh(MSlength, MSlength)
pl = ta.pivotlow(MSlength, MSlength)

if ph > 0
    ph_y := ph
    ph_x := n - MSlength
    ph_cross := false

if pl > 0
    pl_y := pl
    pl_x := n - MSlength
    pl_cross := false
//-----------------------------------------------------------------------------}
//Bullish structures
if close > ph_y and not ph_cross
    if resetOn == 'CHoCH'
        ms := os == -1 ? 1 : 0
    else
        ms := 1

    ph_cross := true

    //Highilight bullish MS
    if showMS
        line.new(ph_x, ph_y, n, ph_y
          , color = bullCss
          , style = os == -1 ? line.style_dashed : line.style_dotted)

    os := 1

    //Search for local minima
    btm := low
    for i = 0 to (n - ph_x)-1
        btm := math.min(low[i], btm)

    osChange = os != os[1]

//-----------------------------------------------------------------------------}
//Bearish structures
if close < pl_y and not pl_cross
    if resetOn == 'CHoCH'
        ms := os == 1 ? -1 : 0
    else
        ms := -1

    pl_cross := true

    //Highilight bearish MS
    if showMS
        line.new(pl_x, pl_y, n, pl_y
          , color = bearCss
          , style = os == 1 ? line.style_dashed : line.style_dotted)

    os := -1

    //Search for local maxima
    top := high
    for i = 0 to (n - pl_x)-1
        top := math.max(high[i], top)

    osChange = os != os[1]

//-----------------------------------------------------------------------------}
//Trailing stop
if ms == 1
    max := close
else if ms == -1
    min := close
else
    max := math.max(close, max)
    min := math.min(close, min)

//Trailing stop
ts := ms == 1 ? btm
  : ms == -1 ? top
  : os == 1 ? ts + (max - max[1]) * incr / 100
  : ts + (min - min[1]) * incr / 100

//-----------------------------------------------------------------------------}
//Plots
css = (ms > 0) ? na 
  : os == 1 ? bullCss
  : bearCss

plot_price = plot(showStrucPlots ? close : na, editable = false, display = display.none)
plot_ts    = plot(showStrucPlots ? ts : na, 'Trailing Stop', color = css)

// plot the 1H trailing stop
ts_1h = f_security(ticker, HTF1, ts, i_repaint)
plot_ts_1h = plot(showStrucPlots ? ts_1h : na, '1H Trailing Stop', color=color.rgb(239, 255, 20))

// plot the 4H trailing stop
ts_4h = f_security(ticker, HTF2, ts, i_repaint)
plot_ts_4h = plot(showStrucPlots ? ts_4h : na, '4H Trailing Stop', color=color.rgb(255, 177, 20))

css_area = (close - ts) * os < 0 ? retCss
  : css

//fill(plot_price, plot_ts, color.new(css_area, areaTransp))
fill(plot_price, plot_ts, color.new(showStrucPlots ? css_area : na, areaTransp))

// trend change plots
osChange = os != os[1]

trendUp = os == 1 and osChange
trendDown = os == -1 and osChange

//MTF os
os_1h = f_security(ticker, HTF1, os, i_repaint)
os_4h = f_security(ticker, HTF2, os, i_repaint)
trendingUp = os == 1
trendingDown = os == -1
trendingUp1H = os_1h == 1
trendingDown1H = os_1h == -1
trendingUp4H = os_4h == 1
trendingDown4H = os_4h == -1

above_ts_1h = close > ts_1h
below_ts_1h = close < ts_1h

// end structure
//-----------------------------------------------------------------------------}




// Triggers
long_trigger = input(title='Long trigger value', defval=1)
short_trigger = input(title='Short trigger value', defval=-1)
trigger = input(defval=close, title="Enter trigger")

var current_so = 0
var current_S_so = 0
var initial_order = 0.0
var initial_S_order = 0.0
var original_ttp_value = 0.0
var quantity = 0.0
var entry_price = 0.0
var firstBarTime = 0.0
var maxDiffDays = 0.0
var soCount = 0
var SO1 = 0
var SO2 = 0
var SO3 = 0
var SO4 = 0
var SO5 = 0
var SO6 = 0
var SO7 = 0
var noSO = 0
var initial_price = 0.0
var initial_S_price = 0.0
var price_drop = 0.0
var price_pump = 0.0
var max_drop = 0.0
var max_pump = 0.0
var pump_date = 0
var pump_month = 0
var drop_date = 0
var drop_month = 0
var longest_trade_day = 0
var longest_trade_month = 0
var take_profit_level = 0.0
var take_profit_level2 = 0.0
var take_S_profit_level = 0.0
var take_S_profit_level2 = 0.0
var tp_plot = 0.0
var tp_plot2 = 0.0
var tp_S_plot = 0.0
var tp_S_plot2 = 0.0
var threshold = 0.0
var S_threshold = 0.0
timeDiff = time - firstBarTime
maxDev = 0.0
maxSDev = 0.0
closedTrades = 0
var tradeCount = 0
var i = 0
var avg_price = 0.0
var total_funds_in_trade = 0.0
var total_qty_in_trade = 0.0
var capital = 100.0

var entry_qty = 0.0
var so_qty = 0.0 // This will be a list if you have multiple safety orders

// Turn that time difference into days (for table stats)
diffDays = timeDiff / 86400000

var int entry_bar_index = na
var int last_so_bar = na
min_bars_between_sos = MinSOBars // Set this to the minimum number of bars you want between SOs
// Variable to track if first take profit is hit
var bool tp1_hit = false
var int tp1_hit_bar = na



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//Long and short entry
///Strategy Inputs
groupTitleLongEntry = "Long Entry"
trigger_long_Input = input.bool(false, "Trigger Long", group = groupTitleLongEntry)
Struc_trigger_long_Input = input.bool(false, "Struc Trigger Long", group = groupTitleLongEntry)
rmi_buy_filterInput = input.bool(false, "RMI Buy Filter", group = groupTitleLongEntry)
ST2longTriggerInput = input.bool(false, "ST2 Long Trigger", group = groupTitleLongEntry)
ST2longFilterInput = input.bool(false, "ST2 Long Filter", group = groupTitleLongEntry)
trendingUp1HFilterInput = input.bool(false, "1H Trending Up Filter", group = groupTitleLongEntry)

groupTitleShortEntry = "Short Entry"
trigger_short_Input = input.bool(false, "Trigger Short", group = groupTitleShortEntry)
Struc_trigger_short_Input = input.bool(true, "Struc Trigger Short", group = groupTitleShortEntry)
rmi_sell_filterInput = input.bool(false, "RMI Sell Filter", group = groupTitleShortEntry)
ST2shortTriggerInput = input.bool(false, "ST2 Short Trigger", group = groupTitleShortEntry)
ST2shortFilterInput = input.bool(false, "ST2 Short Filter", group = groupTitleShortEntry)
trendingDown1HFilterInput = input.bool(false, "1H Trending Down Filter", group = groupTitleShortEntry)

groupTitleSOsExit = "SOs and Exit"
use_rmi_filter_for_subsequent_sos = input.bool(true, "Use RMI Filter for subsequent SOs", group = groupTitleSOsExit)

groupTitleLongExit = "Long SOs and Exit"
use_ST2longFilter_for_SO3 = input.bool(false, "Use ST2longFilter for SO 3", group = groupTitleLongExit)
use_ST2longTrigger_for_SO3 = input.bool(false, "Use ST2longTrigger for SO 3", group = groupTitleLongExit)

groupTitleShortExit = "Short SOs and Exit"
trendingDown1HFilterInputSO = input.bool(false, "1H Trending Down Filter", group = groupTitleShortExit)
use_ST2shortFilter_for_SO3 = input.bool(true, "Use ST2shortFilter for SO 3", group = groupTitleShortExit)
use_ST2shortTrigger_for_SO3 = input.bool(false, "Use ST2shortTrigger for SO 3", group = groupTitleShortExit)


// First Position
//for i = 0 to max_safe_order - 1 by 1
for j = 0 to max_safe_order - 1 by 1
    maxDev := int((maxDev + price_deviation * 100 * math.pow(safe_order_step_scale, i)) * 100) / 100
    maxDev
//for i = 0 to max_S_safe_order - 1 by 1
for j = 0 to max_S_safe_order - 1 by 1
    maxSDev := int((maxSDev + price_S_deviation * 100 * math.pow(safe_S_order_step_scale, i)) * 100) / 100
    maxSDev


if long and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_buy_filterInput ? rmi_buy_filter : true) and (ST2longTriggerInput ? ST2longTrigger : true) and (ST2longFilterInput ? ST2longFilter : true) and (trigger_long_Input ? trigger == long_trigger : true) and (trendingUp1HFilterInput ? trendingUp1H : true) and (Struc_trigger_long_Input ? trendUp : true) 
    _string_long = 'type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order_lots * 100000, alert_message=_string_long)
    initial_order := source_function(source_type)
    current_so := 1
    initial_price := close
    price_drop := close
    original_ttp_value := 0
    firstBarTime := time
    tradeCount += 1
    avg_price := close
    total_funds_in_trade := avg_price * base_order_lots * 100000
    total_qty_in_trade := base_order_lots * 100000

else if short and barstate.isconfirmed and not tp1_hit and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_sell_filterInput ? rmi_sell_filter : true) and (ST2shortTriggerInput ? ST2shortTrigger : true) and (ST2shortFilterInput ? ST2shortFilter : true) and (trigger_short_Input ? trigger == short_trigger : true) and (trendingDown1HFilterInput ? trendingDown1H : true) and (Struc_trigger_short_Input ? trendDown : true)
    log.info("Before Short Entry: Total Funds: " + str.tostring(total_funds_in_trade) + ", Total qty: " + str.tostring(total_qty_in_trade) + ", Entry qty: " + str.tostring(entry_qty) + ", SO qty: " + str.tostring(so_qty) + ", TP1 hit?: " + str.tostring(tp1_hit))
    _string_short = 'type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_S_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Short @' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order_lots * 100000, alert_message=_string_short)
    initial_S_order := source_function(source_type)
    current_so := 1
    firstBarTime := time
    tradeCount += 1
    initial_S_price := close
    price_pump := close
    avg_price := close
    total_funds_in_trade := avg_price * base_S_order_lots * 100000
    total_qty_in_trade := base_S_order_lots * 100000
    entry_qty := base_S_order_lots * 100000 // Update entry_qty instead of total_qty_in_trade
    entry_bar_index := bar_index
    tp1_hit := false
    log.info("Short Entry: Total Funds: " + str.tostring(total_funds_in_trade) + ", Total qty: " + str.tostring(total_qty_in_trade) + ", Entry qty: " + str.tostring(entry_qty) + ", SO qty: " + str.tostring(so_qty) + ", AVG Price: " + str.tostring(avg_price))

//makes the red and green line plot pretty at the position opening
if strategy.position_size == 0
    threshold := low[1]
    S_threshold := high[1]
    S_threshold

//Safety order levels
if strategy.position_size > 0 and i == 0
    if safe_order_step_scale == 1.0
        threshold := initial_order - initial_order * price_deviation * safe_order_step_scale * safe_order_step_scale_Multiplier * current_so
        threshold
    else
        threshold := initial_order - initial_order * (price_deviation * (math.pow(safe_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_order_step_scale - 1))
        threshold
// Modify the calculation of the threshold for short positions
else if strategy.position_size < 0 and i == 0
    if safe_S_order_step_scale == 1.0
        S_threshold := initial_S_order * (1 + price_S_deviation * current_so)
        S_threshold
    else
        S_threshold := initial_S_order * (1 + price_S_deviation * (math.pow(safe_S_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_S_order_step_scale - 1))
        S_threshold

// Short SO (Average Up)
if barstate.isconfirmed and current_so > 0 and window and i == 0 and strategy.position_size < 0 and high >= S_threshold and current_so <= max_S_safe_order and not(hour(time) == 0 and minute(time) < 59) and (na(last_so_bar) or bar_index > last_so_bar + min_bars_between_sos) and (not use_rmi_filter_for_subsequent_sos or rmi_sell_filter) and (use_ST2shortFilter_for_SO3 ? ST2shortFilter : true) and (use_ST2shortTrigger_for_SO3 ? ST2shortTrigger : true) and (trendingDown1HFilterInputSO ? trendingDown1H : true)
    _string_short_so = 'type=order,order-type=short,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring(base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1)) + ',comment="' + version + '-' + test + '",entry=false'
    strategy.entry('SSO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1), alert_message=_string_short_so)
    total_funds_in_trade += close * base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1)
    total_qty_in_trade += base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1)
    so_qty += base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1) // Update so_qty when SO is hit
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1
    tp1_hit := false
    last_so_bar := bar_index // Update the bar index when an SO is executed
    log.info("Short SO executed: Total Funds: " + str.tostring(total_funds_in_trade) + ", Total qty: " + str.tostring(total_qty_in_trade) + ", Entry qty: " + str.tostring(entry_qty) + ", SO qty: " + str.tostring(so_qty) + ", TP1 hit?: " + str.tostring(tp1_hit) + ", Current SO: " + str.tostring(current_so) + ", AVG Price: " + str.tostring(avg_price))


// take profit
// Calculate our TP levels
take_profit_level := avg_price * (1 + take_profit)
take_profit_level2 := avg_price * (1 + take_profit2)
take_S_profit_level := avg_price * (1 - take_S_profit)
take_S_profit_level2 := avg_price * (1 - take_S_profit2)

if i == 1
    strategy.close_all() // Close all positions
    i := 0 // Reset the counter


// TP1 Short Profit (partial close)
if barstate.isconfirmed and window and take_S_profit_level >= low and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59) and not tp1_hit
    _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close short order string
    strategy.order("Close Half Entry", strategy.long, qty=entry_qty / 2, comment='TP1 @' + str.tostring(source_function(source_type)), alert_message=_string_close_short) // Close 1/2 of the entry order
    strategy.order("Close Half SO", strategy.long, qty=so_qty / 2, comment='TP1 @' + str.tostring(source_function(source_type)), alert_message=_string_close_short) // Close 1/2 of the safety order
    tp1_hit := true
    total_funds_in_trade -= (entry_qty / 2 + so_qty / 2) * avg_price // Subtract the funds released by the closed portion from the total funds in trade
    entry_qty -= entry_qty / 2 // Update entry_qty
    so_qty -= so_qty / 2 // Update so_qty
    tp1_hit_bar := bar_index
    capital *= (1 + (entry_qty + so_qty) * take_S_profit / 100) // Update the capital
    log.info("TP1 Short Close half of the position: Total Funds: " + str.tostring(total_funds_in_trade) + ", Total qty: " + str.tostring(total_qty_in_trade) + ", Entry qty: " + str.tostring(entry_qty) + ", SO qty: " + str.tostring(so_qty)+ ", TP1 hit?: " + str.tostring(tp1_hit) + ", AVG Price: " + str.tostring(avg_price))


// Short TP2 Close!
// If the take short profit level is reached and the position is short, close the trade
if barstate.isconfirmed and window and tp1_hit and take_S_profit_level2 >= low and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close short order string
    strategy.close_all(comment='Close Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short) // Close the short position
    soCount := current_so // Save the current scale-out count
    current_so := 0 // Reset the current scale-out count
    price_pump := na // Reset the price pump value
    initial_S_price := na // Reset the initial short price
    diffDays := time - firstBarTime // Calculate the difference in days
    if diffDays > maxDiffDays // If the difference in days is greater than the maximum difference in days
        maxDiffDays := diffDays // Update the maximum difference in days
        maxDiffDays
    initial_S_order := 0.0 // Reset the initial short order
    total_qty_in_trade := 0.0 // Reset the total qty in trade
    total_funds_in_trade := 0.0 // Reset the total funds in trade
    avg_price := na // Reset the average price
    capital *= (1 + total_qty_in_trade * take_S_profit / 100) // Update the capital
    tp1_hit := false
    entry_qty := 0.0 // Update entry_qty
    so_qty := 0.0// Update so_qty
    entry_bar_index := na
    log.info("TP2 Hit Close All: Total Funds: " + str.tostring(total_funds_in_trade) + ", Total qty: " + str.tostring(total_qty_in_trade) + ", Entry qty: " + str.tostring(entry_qty) + ", SO qty: " + str.tostring(so_qty) + ", TP1 hit?: " + str.tostring(tp1_hit)  + ", AVG Price: " + str.tostring(avg_price))

//Table building and calculations
if strategy.position_size == 0
    if soCount == 1
        noSO += 1
        noSO
    else if soCount == 2
        SO1 += 1
        SO1
    else if soCount == 3
        SO2 += 1
        SO2
    else if soCount == 4
        SO3 += 1
        SO3
    else if soCount == 5
        SO4 += 1
        SO4
    else if soCount == 6
        SO5 += 1
        SO5
    else if soCount == 7
        SO6 += 1
        SO6
    else if soCount == 8
        SO7 += 1
        SO7
    soCount := 0
    soCount
closedTrades := noSO + SO1 * 2 + SO2 * 3 + SO3 * 4 + SO4 * 5 + SO5 * 6 + SO6 * 7 + SO7 * 8

if low < price_drop and window and strategy.position_size > 0
    price_drop := low
    if max_drop < int((1 - price_drop / initial_price) * 10000) / 100
        max_drop := int((1 - price_drop / initial_price) * 10000) / 100
        drop_date := dayofmonth(time)
        drop_month := month(time)
        drop_month
bgcolor(max_drop[1] < max_drop ? color.new(#0b5a64, 100) : na)

if high > price_pump and window and strategy.position_size < 0
    price_pump := high
    if max_pump < int((price_pump / initial_S_price - 1) * 10000) / 100
        max_pump := int((price_pump / initial_S_price - 1) * 10000) / 100
        pump_date := dayofmonth(time)
        pump_month := month(time)
        pump_month
bgcolor(max_pump[1] < max_pump ? color.new(#9b27b0, 99) : na)

if take_profit_level > 0 and strategy.position_size > 0
    tp_plot := take_profit_level
    tp_plot
else
    tp_plot := close
    tp_plot

if take_S_profit_level > 0 and strategy.position_size < 0
    tp_S_plot := take_S_profit_level
    tp_S_plot
else
    tp_S_plot := close
    tp_S_plot

if take_profit_level2 > 0 and strategy.position_size > 0
    tp_plot2 := take_profit_level2
    tp_plot2
else
    tp_plot2 := close
    tp_plot2

if take_S_profit_level2 > 0 and strategy.position_size < 0
    tp_S_plot2 := take_S_profit_level2
    tp_S_plot2
else
    tp_S_plot2 := close
    tp_S_plot2

//Plotting the levels
p1 = plot(tp_plot, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color
p2 = plot(avg_price, color=strategy.position_size == 0 ? na : TTBColors.colorNeutral()) // Neutral color
p3 = plot(threshold, color=strategy.position_size <= 0 ? na : TTBColors.colorDown()) // Down color
p4 = plot(tp_S_plot, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color
p5 = plot(tp_S_plot2, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color for TP2
p6 = plot(S_threshold, color=strategy.position_size >= 0 ? na : TTBColors.colorDownPlus()) // DownPlus color
p7 = plot(tp_plot2, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color for TP2
fill(p1, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color
fill(p2, p3, strategy.position_size > 0 ? color.new(TTBColors.colorNeutral(), 90) : na) // Semi-transparent Neutral color
fill(p4, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color
fill(p5, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color for TP2
fill(p6, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorDownPlus(), 90) : na) // Semi-transparent DownPlus color
fill(p7, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color for TP2

text_size = text_size_switch ? size.small : size.normal


//Table formatting
if show_table
    var Table = table.new(position.bottom_right, columns=2, rows=20, border_width=1, bgcolor=color.new(#363a45, 0), border_color=color.gray)
    table.cell(table_id=Table, column=0, row=0, text_color=color.gray, text_size=text_size, text='Net Profit')
    table.cell(table_id=Table, column=1, row=0, text=str.tostring(int((capital - 100) * 100) / 100) + '%', text_size=text_size, text_color=TTBColors.colorUplight())
    table.cell(table_id=Table, column=0, row=1, text_color=color.gray, text_size=text_size, text='Max Deviation ')
    table.cell(table_id=Table, column=1, row=1, text=str.tostring(maxDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=2, text_color=color.gray, text_size=text_size, text='Max Short Dev ')
    table.cell(table_id=Table, column=1, row=2, text=str.tostring(maxSDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=3, text='No SO ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=3, text=str.tostring(noSO), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=4, text='SO 1 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=4, text=str.tostring(SO1), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=5, text='SO 2 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=5, text=str.tostring(SO2), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=6, text='SO 3 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=6, text=str.tostring(SO3), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=7, text='SO 4 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=7, text=str.tostring(SO4), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=8, text='SO 5 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=8, text=str.tostring(SO5), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=9, text='SO 6 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=9, text=str.tostring(SO6), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=10, text='SO 7 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=10, text=str.tostring(SO7), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=11, text='Closed/Open trades', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=11, text=str.tostring(strategy.closedtrades) + '/' + str.tostring(strategy.opentrades), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=12, text='Current Deal Time', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=12, text=strategy.position_size != 0 ? str.tostring(int((time - firstBarTime) / 8640000) / 10) + ' days' : '0', text_size=text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=13, text='Unrealized position', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=13, text=str.tostring(int(strategy.openprofit / (strategy.initial_capital + strategy.netprofit) * 10000) / 100) + ' %', text_size=text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=14, text='Longest deal:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=14, text=str.tostring(int(maxDiffDays / 8640000) / 10) + ' days, ' + str.tostring(longest_trade_day) + '/' + str.tostring(longest_trade_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=15, text='Max price drop:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=15, text=str.tostring(max_drop) + ' %, ' + str.tostring(drop_date) + '/' + str.tostring(drop_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=16, text='Max price pump:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=16, text=str.tostring(max_pump) + ' %, ' + str.tostring(pump_date) + '/' + str.tostring(pump_month), text_size=text_size, text_color=TTBColors.colorDownlight())

var tbb = TTBTableBuilder.new(position.bottom_left,2,2)
if barstate.isconfirmed
	header = tbb.R(0).TextColor(color.rgb(18, 247, 255)).TextSize(size.normal).Font(font.family_monospace)
	header.Text("1H","4H")
	tbb.R(1).TextColor(color.white).TextSize(size.small).Text("A","B","C").Bg(color.rgb(255, 255, 255, 74))
	// tbb.R(2).TextColor(color.white).TextSize(size.small).Text("A","B","C")
	// tbb.R(3).TextColor(color.white).TextSize(size.small).Text("A","B","C").Bg(color.rgb(255, 255, 255, 74))
	// tbb.R(4).TextColor(color.white).TextSize(size.small).Text("A","B","C")