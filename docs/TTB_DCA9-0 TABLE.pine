//@version=5

strategy(title="TTB DCA 9-0", shorttitle="TTB DCA 9-0", overlay=true, 
     initial_capital=1000000, calc_on_order_fills=true, default_qty_type=strategy.cash, default_qty_value=100000, currency=currency.USD,
     pyramiding=5, use_bar_magnifier=true, calc_on_every_tick=false, process_orders_on_close=true, close_entries_rule='ANY')

import thetradingbot/ttbcolors/1 as TTBColors
import thetradingbot/TTB_TableBuilder/1 as TTBTableBuilder

start_after_X_bars = 500
showHodl       = false
showTable      = input.bool(false , title='show trade data table'    )


//entry inputs
trigger = input(defval=close, title="Enter trigger")
long_trigger = input(title='Long trigger value', defval=1)
short_trigger = input(title='Short trigger value', defval=-1)
default_condition = close > open and close > math.max(close[2], open[2]) and low[1] < low[2] and high[1] < high[2]

// Date Ranges
startDateTime = input.time(timestamp("1 Feb 2021 12:00"), title="Start", group="Strategy Date Range")
endDateTime = input.time(timestamp("1 Feb 2024 12:00"), title="End", group="Strategy Date Range")
window = time >= startDateTime and time <= endDateTime ? true : false  // create function "within window of time"

//exit inputs
atrPeriod_TP      = 10
atrMultiplier_TP  = input.float( 2.0 , title='TP ATR Multiplier'          )
ATR_TP = ta.atr(atrPeriod_TP)[1] * atrMultiplier_TP
atrPeriod_SL      = 10
atrMultiplier_SL  = input.float( 20.0 , title='SL ATR Multiplier'          )
ATR_SL = ta.atr(atrPeriod_SL)[1] * atrMultiplier_SL

//size inputs
L1_lots = input.float( 0.4 , title='L1 size'          )
Size_Factor = input.float( 1 , title='Size Factor'          )
L2_lots = L1_lots * Size_Factor
L3_lots = L2_lots * Size_Factor
L4_lots = L3_lots * Size_Factor
L5_lots = L4_lots * Size_Factor


//------------- DETERMINE CURRENCY CONVERSION RATE ------------- { //
// Import ZenLibrary
import ZenAndTheArtOfTrading/ZenLibrary/5 as zen
// Custom function for converting units into lot sizes
unitsToLots(units) =>
    float lots = units / 100000
    lots := math.round(lots, 2)
    _return = lots * 100000
// Check if our account currency is the same as the base or quote currency or neither (for risk $ conversion purposes)
accountSameAsCounterCurrency = strategy.account_currency == syminfo.currency
accountSameAsBaseCurrency = strategy.account_currency == syminfo.basecurrency
accountNeitherCurrency = not accountSameAsCounterCurrency and not accountSameAsBaseCurrency
// Get currency conversion rates if applicable
conversionCurrencyPair = accountSameAsCounterCurrency ? syminfo.tickerid : strategy.account_currency + syminfo.currency
conversionCurrencyRate = accountSameAsBaseCurrency or accountNeitherCurrency ? request.security(conversionCurrencyPair, "D", close, ignore_invalid_symbol=true) : 1.0
// Display the current conversion currency ticker (for debug purposes)
if barstate.islastconfirmedhistory
    table t = table.new(position.top_right, 1, 2, color.black)
    table.cell(t, 0, 0, "Conversion: " + conversionCurrencyPair + " (" + str.tostring(conversionCurrencyRate) + ")", text_color=color.white, text_size=size.small)
    table.cell(t, 0, 1, "Account: $" + str.tostring(zen.truncate(strategy.equity)), text_color=color.white, text_size=size.small)

//positionSize = Lots * 100000  // Convert lots to units
//lotSize = unitsToLots(positionSize)

L1_order = L1_lots * 100000
L2_order = L2_lots * 100000
L3_order = L3_lots * 100000
L4_order = L4_lots * 100000
L5_order = L5_lots * 100000
//------------- END CURRENCY CONVERSION RATE CODE ------------- }//


// vars
var hodl       = 0.
var firstClose = 0.
var firstCoin  = 0.
var trades     = 5
var isFirst    = 0

// Initialize arrays
var entryFlags = array.new_int(5, 0)
var SLlines = array.new_float(5, na)
var TPlines = array.new_float(5, na)
var entryPrices = array.new_float(0)
var orderSizes = array.new_float(5, na)
var AVGLine = array.new_float(5, na)

// Set order sizes
array.set(orderSizes, 0, L1_order)
array.set(orderSizes, 1, L2_order)
array.set(orderSizes, 2, L3_order)
array.set(orderSizes, 3, L4_order)
array.set(orderSizes, 4, L5_order)


// ———————[ condition ]———————
// {
cond = window and barstate.isconfirmed and (bar_index > start_after_X_bars) and (trigger == long_trigger)
// }


// Entry and exit conditions
for i = 0 to 4
    if barstate.isconfirmed and cond and array.get(entryFlags, i) == 0
        SL = close[0] - ATR_SL
        TP = close[0] + ATR_TP
        strategy.entry('L' + str.tostring(i + 1), strategy.long, qty=array.get(orderSizes, i))
        array.set(SLlines, i, SL)
        array.set(TPlines, i, TP)
        array.set(entryFlags, i, 1)
        array.push(entryPrices, close[0]) // Add the entry price to the array
        log.info("L{0} entry: SL = {1}, TP = {2}, Entry Price = {3}", i + 1, SL, TP, close[0])
    if array.get(entryFlags, i) == 1 and (high > array.get(TPlines, i) or low < array.get(SLlines, i))
        array.set(entryFlags, i, 0)
    if array.get(entryFlags, i) == 1
        array.set(AVGLine, i, array.avg(entryPrices))

//exits
for i = 0 to 4
    strategy.exit('xL' + str.tostring(i + 1), from_entry = 'L' + str.tostring(i + 1), limit = array.get(TPlines, i), stop = array.get(SLlines, i), when=array.get(entryFlags, i) == 1)

// Reset array values
for i = 0 to 4
    if array.get(entryFlags, i) == 1 and (high > array.get(TPlines, i) or low < array.get(SLlines, i))
        array.set(entryFlags, i, 0)
        array.set(AVGLine, i, na) // Reset AVGLine

// plots
plot(array.get(entryFlags, 0) == 1 ? array.get(TPlines, 0) : na, color=color.new(color.blue  , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 0) == 1 ? array.get(SLlines, 0) : na, color=color.new(color.blue  , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 1) == 1 ? array.get(TPlines, 1) : na, color=color.new(color.yellow, 50), style=plot.style_linebr)
plot(array.get(entryFlags, 1) == 1 ? array.get(SLlines, 1) : na, color=color.new(color.yellow, 50), style=plot.style_linebr)
plot(array.get(entryFlags, 2) == 1 ? array.get(TPlines, 2) : na, color=color.new(color.white , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 2) == 1 ? array.get(SLlines, 2) : na, color=color.new(color.white , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 3) == 1 ? array.get(TPlines, 3) : na, color=color.new(color.lime  , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 3) == 1 ? array.get(SLlines, 3) : na, color=color.new(color.lime  , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 4) == 1 ? array.get(TPlines, 4) : na, color=color.new(color.red   , 50), style=plot.style_linebr)
plot(array.get(entryFlags, 4) == 1 ? array.get(SLlines, 4) : na, color=color.new(color.red   , 50), style=plot.style_linebr)
//
plot(showHodl and firstClose > 0 ? firstClose : na)
// Plotting AVGLine
titleArray = ["Average Entry Line 1", "Average Entry Line 2", "Average Entry Line 3", "Average Entry Line 4", "Average Entry Line 5"]

for i = 0 to 4
    plot(array.get(AVGLine, i), color=color.new(#ffffff, 54), style=plot.style_linebr, title=titleArray[i])

// ———————[ Table ]———————
// {
if isFirst == 1 and isFirst[1] == 0 
    if showHodl
        line.new(bar_index, low, bar_index, high, extend=extend.both)
    firstClose := close
    firstCoin  := strategy.initial_capital / firstClose

if barstate.islastconfirmedhistory and showTable
    initialcap   = strategy.initial_capital
    hodl        := math.round((firstCoin * close)  , 2)
    Currenteq    = math.round(strategy.equity      , 2) // (strategy.initial_capital + strategy.netprofit + strategy.openprofit).
    closedtrades = strategy.closedtrades
    opentrades   = strategy.opentrades
    grossprofit  = math.round(strategy.grossprofit , 2)
    grossloss    = math.round(strategy.grossloss   , 2)
    netprofit    = math.round(strategy.netprofit   , 2)
    openprofit   = math.round(strategy.openprofit  , 2)
    max_drawdown = math.round(strategy.max_drawdown, 2)
    wintrades    = strategy.wintrades
    losstrades   = strategy.losstrades
    eventrades   = strategy.eventrades
    PF           = math.round(      grossprofit/grossloss   , 3)
    avgTrade     = math.round(      netprofit  /closedtrades, 2)
    prcProf      = math.round(100/(closedtrades/wintrades)  , 2)
    //
	var table    = table.new(position = position.top_right, columns = 4, rows =20, bgcolor = color.new(color.yellow, 100), border_width = 1)
	colEq = Currenteq   >  initialcap  ? color.lime   :  Currenteq < initialcap ? #FF0000   : color.white
	coBaH = hodl        >  initialcap  ? color.lime   :  hodl      < initialcap ? #FF0000   : color.white
	coAVG = avgTrade    >  0           ? color.lime   :  avgTrade  < 0          ? #FF0000   : color.white
	bgCEq = Currenteq   >= hodl        ? color.lime   : color.silver
	bgBaH = Currenteq   >= hodl        ? color.silver : color.lime
	colGP = grossprofit > 0            ? color.lime   : color.blue
	colGL = grossloss   > 0            ? #FF0000      : color.blue
	colNP = netprofit   > 0            ? color.lime   : netprofit  < 0          ? #FF0000   : color.blue
	colOP = openprofit  > 0            ? color.lime   : color.blue
    //
	table.cell(table_id = table, column = 0, row = 1, text = 'initial capital: '       , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 0, row = 2, text = 'current equity: '        , text_color = color.new(color.white , 10), bgcolor=color.new(bgCEq       , 90))
	table.cell(table_id = table, column = 0, row = 3, text = 'Buy and hold: '          , text_color = color.new(color.white , 10), bgcolor=color.new(bgBaH       , 90))
	table.cell(table_id = table, column = 0, row = 4, text = 'max drawdown: '          , text_color = color.new(color.red   , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 0, row = 5, text = 'gross profit: '          , text_color = color.new(color.blue  , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 0, row = 6, text = 'gross loss: '            , text_color = color.new(color.blue  , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 0, row = 7, text = 'net profit: '            , text_color = color.new(color.blue  , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 0, row = 8, text = 'open profit: '           , text_color = color.new(color.blue  , 10), bgcolor=color.new(color.silver, 90))
    //
	table.cell(table_id = table, column = 1, row = 1, text = str.tostring(initialcap)  , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 1, row = 2, text = str.tostring(Currenteq)   , text_color = color.new(colEq       , 10), bgcolor=color.new(bgCEq       , 90))
	table.cell(table_id = table, column = 1, row = 3, text = str.tostring(hodl)        , text_color = color.new(coBaH       , 10), bgcolor=color.new(bgBaH       , 90))
	table.cell(table_id = table, column = 1, row = 4, text = str.tostring(max_drawdown), text_color = color.new(color.red   , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 1, row = 5, text = str.tostring(grossprofit) , text_color = color.new(colGP       , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 1, row = 6, text = str.tostring(grossloss)   , text_color = color.new(colGL       , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 1, row = 7, text = str.tostring(netprofit)   , text_color = color.new(colNP       , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 1, row = 8, text = str.tostring(openprofit)  , text_color = color.new(colOP       , 10), bgcolor=color.new(color.silver, 90))
    //
	table.cell(table_id = table, column = 2, row = 1, text = 'Profit Factor: '         , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 2, row = 2, text = '% Profitable: '          , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 2, row = 3, text = 'avg Trade: '             , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 2, row = 4, text = 'closed trades: '         , text_color = color.new(color.white , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 2, row = 5, text = 'win trades: '            , text_color = color.new(color.white , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 2, row = 6, text = 'loss trades: '           , text_color = color.new(color.white , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 2, row = 7, text = 'even trades: '           , text_color = color.new(color.white , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 2, row = 8, text = 'open trades: '           , text_color = color.new(color.white , 10), bgcolor=color.new(color.blue  , 90))
    //
	table.cell(table_id = table, column = 3, row = 1, text = str.tostring(PF)          , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 3, row = 2, text = str.tostring(prcProf)     , text_color = color.new(color.white , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 3, row = 3, text = str.tostring(avgTrade)    , text_color = color.new(coAVG       , 10), bgcolor=color.new(color.silver, 90))
	table.cell(table_id = table, column = 3, row = 4, text = str.tostring(closedtrades), text_color = color.new(color.yellow, 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 3, row = 5, text = str.tostring(wintrades)   , text_color = color.new(color.lime  , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 3, row = 6, text = str.tostring(losstrades)  , text_color = color.new(#FF0000     , 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 3, row = 7, text = str.tostring(eventrades)  , text_color = color.new(color.yellow, 10), bgcolor=color.new(color.blue  , 90))
	table.cell(table_id = table, column = 3, row = 8, text = str.tostring(opentrades)  , text_color = color.new(color.yellow, 10), bgcolor=color.new(color.blue  , 90))
    //
// }    